from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import filters
from keyboards.keyboard import *
from states.States import *
from loader import dp, db, bot
import config as cfg
import datetime

@dp.callback_query_handler(text="profile_button")
async def process_profile_command(call: types.CallbackQuery):
    
    date_register = db.get("SELECT date_register FROM users WHERE user_id = ?", (call.from_user.id,))
    balance = db.get("SELECT balance FROM users WHERE user_id = ?", (call.from_user.id,))
    transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (call.from_user.id,))
    for balance in balance:
        pass
    for x in date_register:
        date = datetime.datetime.fromtimestamp(x).strftime('%d-%m-%Y')
    for transactions in transactions:
        pass
    
    await call.message.edit_text(
        f"üë§–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \nüìÉ–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.username}\n‚è≥–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date}\nüëë–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {transactions}\nüíµ–ë–∞–ª–∞–Ω—Å: {balance}$\n‚öñ–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ –≤ –±–æ—Ç–∞: 0$\n‚öñ–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–≤–µ–¥–µ–Ω–æ –≤ –±–æ—Ç–∞: 0$",
        parse_mode="html",
        reply_markup = profile_keyboard
    )
    
@dp.callback_query_handler(text="support_button")
async def process_support_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n@wolfsblood550 - –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n@lolzcoder_star - –î–∏—Ä–µ–∫—Ç–æ—Ä\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø–æ –ø–æ–≤–æ–¥—É –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–µ—Ä–µ–∫—Ç–æ—Ä—É",
        parse_mode="html",
        reply_markup = support_keyboard
    )

@dp.callback_query_handler(text="add_balance_button")
async def process_add_balance_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üí≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        parse_mode="html",
        reply_markup = add_money_keyboard
    )
    
@dp.callback_query_handler(text="withdraw_money_button")
async def process_withdraw_balance_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üí≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:',
        parse_mode="html",
        reply_markup = withdraw_money_keyboard
    )
    
@dp.callback_query_handler(text="referal_system_button")
async def process_referal_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{cfg.BOT_NICKNAME}?start={call.from_user.id}",
        parse_mode="html",
        reply_markup = referal_system_keyboard
    )
    
@dp.callback_query_handler(text="guarantee_deal_button")
async def process_guarntee_command(call: types.CallbackQuery):
    await call.message.edit_text(
        '‚ñ™ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚ñ´\nüî∏–í–∞–∂–Ω–æ: –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫',
        parse_mode="html",
        reply_markup = guarantee_deal_keyboard
    )
    
@dp.callback_query_handler(text="my_purchases_button")
async def process_purchases_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üõí‚Äç –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É ',
        parse_mode="html",
        reply_markup = my_purchases_keyboard
    )
    
@dp.callback_query_handler(text="market_button")
async def process_market_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üì∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É',
        parse_mode="html",
        reply_markup = market_keyboard
    )   

#–ö–Ω–æ–ø–∫–∏ —Ä—ã–Ω–∫–∞
    
@dp.callback_query_handler(text="accounts_button")
async def process_accounts_command(call: types.CallbackQuery):
    
    await call.message.edit_text(
          f"üî∂–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ",
         reply_markup = accounts_keyboard
     )

@dp.callback_query_handler(text="accounts")
async def all_products(call: types.CallbackQuery):
    
    data = db.get("SELECT * FROM products", (), False)
    await call.message.edit_text("‚óΩÔ∏è‚óºÔ∏è‚óΩÔ∏è–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª—É –∞–∫–∫–∞—É–Ω—Ç—ã:‚óΩÔ∏è‚óºÔ∏è‚óΩÔ∏è", reply_markup=genmarkup(data))  

    
@dp.callback_query_handler(text="manuals_button")
async def process_manuals_command(call: types.CallbackQuery):
    await call.message.edit_text(
        '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Ç–µ–º–∞—Ç–∏–∫–µ:',
        parse_mode="html",
        reply_markup = manuals_keyboard
    )
    
@dp.callback_query_handler(text="cancel_product", state=GoodsMarket.end)
async def process_manuals_command(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Ç–µ–º–∞—Ç–∏–∫–µ:',
        parse_mode="html",
        reply_markup = manuals_keyboard
        )
    await state.finish()
# –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—ã–Ω–æ–∫

@dp.callback_query_handler(text="add_your_product_button", state=None)
async def process_add_product_command(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    await GoodsMarket.namegoods.set()
    
@dp.callback_query_handler(text="display_product", state=GoodsMarket.end)
async def end_creation(call: types.CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    db.change(f"INSERT INTO products VALUES(NULL, ?, ?, ?, ?)", (data['namegoods'], data['description'], data['abou–µseller'], data['price'],))
    await call.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–∞–º—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {data['namegoods']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n–û –ø—Ä–æ–¥–∞–≤—Ü–µ: {data['abou–µseller']}\n–¶–µ–Ω–∞: {data['price']}$",
        reply_markup = products
        )
    await state.finish()
    
#–ö–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

@dp.callback_query_handler(text="your_referals_button")
async def process_your_referals_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.count_referals(call.from_user.id)}",
        parse_mode="html",
        reply_markup = your_referals_keyboard
    )

#–ö–ù–û–ü–ö–ò –°–î–ï–õ–ö–ò –° –ì–ê–†–ê–ù–¢–û–ú
    
# –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É–º–º—ã   
@dp.callback_query_handler(text="buyer_button", state=None)
async def start_deal(call: types.CallbackQuery, state: FSMContext):

# –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –¥–µ–Ω–µ–≥ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É
    subtraction_balance = db.get("SELECT balance FROM users WHERE user_id = ?", (call.from_user.id,))
    for subtraction_balance in subtraction_balance:
        pass
    if subtraction_balance <= 0:       
        await call.message.edit_text("–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É —Å 0$ –Ω–∞ —Å—á–µ—Ç—É\n–° –ø–µ—Ä–≤–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç",
                                     reply_markup = no_money
                                     )
    else:
        transaction_status = db.get("SELECT transaction_status FROM users WHERE user_id = ?", (call.from_user.id,))
        for i in transaction_status:
            pass
        if i == 1:
            await call.message.edit_text("‚õîÔ∏è–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ 1 –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏\n‚õîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É", reply_markup = start_keyboard)
        else:       
            await call.message.edit_text("‚ñ´–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:\n‚ñ™–ø—Ä–∏–º–µ—Ä: üî∏5$ / üî∏$5.23\n‚óº–í–∞–∂–Ω–æ: –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ –∑–Ω–∞–∫–∞ '$'")
            await StateMessage.translation.set()

# –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query_handler(state=StateMessage.end, text=["end–ïransaction"])
async def call_sss(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    
    await call.message.edit_text(
        f"‚ñ´–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['translation']}$\n‚óªNickName –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{data['nickname']}\n‚ö™–£—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏: {data['description']}",
        reply_markup = my_purchases_keyboard
    )
    money = data['translation']

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–¥–µ–ª–∫—É –µ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 1
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (1, call.from_user.id))
    db.change("UPDATE users SET summ_input = ? WHERE user_id = ?", (money, call.from_user.id,))
    
    await bot.send_message(data['userid'][0],
                f"üîî–í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É\n‚ñ´C—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['translation']}$\n‚óª–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{call.from_user.username}\n‚ö™–£—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏: {data['description']}",
                reply_markup = InlineKeyboardMarkup(row_width=1).add(
                        InlineKeyboardButton("üü©–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"done_{call.from_user.id}"),
                        InlineKeyboardButton("üü•–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏", callback_data=f"cencel_{call.from_user.id}")
                    )           
                )
    await state.finish()
    
@dp.callback_query_handler(filters.Regexp("done*"))
async def callback_query(call: types.CallbackQuery):
    
     # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = call.data.split("_")

    balance = db.get("SELECT balance FROM users WHERE user_id = ?", (params[1],))
    summ_input = db.get("SELECT summ_input FROM users WHERE user_id = ?", (params[1],))
    
#   –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, —Ç–æ —É —Ç–æ–≥–æ –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç
    for balance in balance:
        pass
    for summ in summ_input:
        pass
    
    newsumm = balance - summ
    
    db.change("UPDATE users SET balance = ? WHERE user_id = ?", (newsumm, params[1],))
    username = db.get("SELECT login FROM users WHERE user_id = ?", (params[1],))
    for username in username:
        pass
    
    await call.message.edit_text(f"–í –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")
    await bot.send_message(params[1],
                f"\n\nüü© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Å–¥–µ–ª–∫—É",
                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"addbalance_{call.from_user.id}"),
                    )
                )
    
@dp.callback_query_handler(filters.Regexp("addbalance*"))
async def callback_query(call: types.CallbackQuery):
    
    params = call.data.split("_")
        
    replenishment = db.get("SELECT summ_input FROM users WHERE user_id = ?", (call.from_user.id,))
    user_recipient = db.get("SELECT balance FROM users WHERE user_id = ?", (params[1],))
    username = db.get("SELECT login FROM users WHERE user_id = ?", (params[1],))
    for replenishment in replenishment:
        pass
    for user_recipient in user_recipient:
        pass
    for username in username:
        pass
    await bot.send_message(params[1], f"–°–¥–µ–ª–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {call.from_user.username} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –≤–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {replenishment}$", reply_markup = start_keyboard)
    await call.message.edit_text(f"–°–¥–µ–ª–∫–∞ c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å, —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ: {replenishment}$", reply_markup = start_keyboard)
    
    newbalance = user_recipient + replenishment

    onenumber_transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (params[1],))
    twonumber_transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (call.from_user.id,))
    for onenumber_transactions in onenumber_transactions:
        pass
    for twonumber_transactions in twonumber_transactions:
        pass
    onenumber_transactions = onenumber_transactions + 1
    twonumber_transactions = twonumber_transactions + 1
    
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (0, call.from_user.id,))
    db.change("UPDATE users SET balance = ? WHERE user_id = ?", (newbalance, params[1],))
    db.change("UPDATE users SET summ_input = ? WHERE user_id = ?", (0, call.from_user.id,))
    db.change("UPDATE users SET number_transactions = ? WHERE user_id = ?", (onenumber_transactions, params[1],))
    db.change("UPDATE users SET number_transactions = ? WHERE user_id = ?", (twonumber_transactions, call.from_user.id,))
    
@dp.callback_query_handler(filters.Regexp("cencel*"))
async def callback_query(call: types.CallbackQuery):
    
     # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = call.data.split("_")
    
    db.change("UPDATE users SET summ_input = ? WHERE user_id = ?", (0, params[1],))
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (0, params[1],))
    username = db.get("SELECT login FROM users WHERE user_id = ?", (params[1],))
    for username in username:
        pass
    
    await call.message.edit_text(f"üü•–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username}", reply_markup = start_keyboard)
    await bot.send_message(params[1], f"\n\nüü• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É",
                                reply_markup=start_keyboard
    )

#   –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î

@dp.callback_query_handler(state=StateMessage.end, text=["backMenu_after_deal"]) 
async def process_backMenu_command(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode="html",
        reply_markup = start_keyboard
    )
    await state.finish() 

@dp.callback_query_handler(text="backMenu")
async def process_backMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode="html",
        reply_markup = start_keyboard
    )

@dp.callback_query_handler(text="backReferalMenu")
async def process_backReferalMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{cfg.BOT_NICKNAME}?start={call.from_user.id}",
        parse_mode="html",
        reply_markup = referal_system_keyboard
    )
 
@dp.callback_query_handler(text="backGuaranteeMenu")
async def process_backGuaranteeMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üì¨ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É: ',
        parse_mode="html",
        reply_markup = guarantee_deal_keyboard
    )
    
@dp.callback_query_handler(text="backMarketMenu")
async def process_backMarketMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üì∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É',
        parse_mode="html",
        reply_markup = market_keyboard
    )   

@dp.callback_query_handler(text="backProductMenu")
async def process_backProductlMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Ç–µ–º–∞—Ç–∏–∫–µ:',
        parse_mode="html",
        reply_markup = manuals_keyboard
    )