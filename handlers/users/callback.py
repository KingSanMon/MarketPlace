from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import filters
from keyboards.keyboard import *
from states.States import *
from loader import dp, db, bot
from cryptomus import Client
from handlers.admin.message import admins
import config as cfg
import datetime

# region –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ—è –∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
# –Ω–∞ –≤—ã–≤–æ–¥
PAYOUT_KEY = 'Dt0xmkKOcb5AFPGLzV1T7A925pGAlAV2kNOxzzy6wKKSEw3iIWfCAmDgRK5bFUOuB130UuVS5CJCl1JkVNxra2LvlKlDkExD2d9OAu1wus2KsWKV6CsZ0XhZjTw219q1'
MERCHANT_UUID = 'e1c2e3c5-9e75-4438-a6f6-746a362d4bf6'

payout = Client.payout(PAYOUT_KEY, MERCHANT_UUID)

# –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
PAYMENT_KEY = 'qd38AHmwZu9cIPVUDyfe3DZ2ezvWlkWuy5S2vv2jtoSJB8gC562ZFYfzeSphocBa8KTk3LB47cRTzzrNdb5CIRKbiTWSOy2AMettnI0YYPgI43aViJUnSbA0andEQsq8'

payment = Client.payment(PAYMENT_KEY, MERCHANT_UUID)
# endregion

# region –†—ã–Ω–æ–∫
@dp.callback_query_handler(text="market_button")
async def process_market_command(call: types.CallbackQuery):

    with open(f"photos/bitoc.png", 'rb') as file:
        photo = types.InputMediaPhoto(file)
        await call.message.edit_media(media=photo)

    await call.message.edit_caption(
        f"‚ùï<u><b>–ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É</b></u>\nüíÆ–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã\n----------------------------------------------------------------\n‚ùï<u><b>–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∏–º–µ—é—â–∏–π—Å—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç</b></u>\nüíÆ–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º",
        parse_mode=types.ParseMode.HTML,
        reply_markup=accounts_keyboard
    )

# region –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞-–ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@dp.callback_query_handler(text="useraccounts")
async def add_product(call: types.CallbackQuery):
    await call.message.edit_caption(
        f"üîÆ–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏–µ",
        parse_mode=types.ParseMode.HTML,
        reply_markup=new_accounts
    )
# endregion

# region –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞-–≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
@dp.callback_query_handler(text="add_new")
async def procces_add_accounts(call: types.CallbackQuery):
    data = db.get("SELECT * FROM sections", (), False)
    await call.message.edit_caption(
        f"üíÆ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∞—à –ø—Ä–æ–¥—É–∫—ÇüõÑ",
        parse_mode=types.ParseMode.HTML,
        reply_markup=AddProducts(data)
    )
# endregion

# region –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä—ã
@dp.callback_query_handler(filters.Regexp("adprod*"), state="*")
async def add_new_accounts(call: types.CallbackQuery, state: FSMContext):
    
    data = call.data.split("_")[1]
    await state.update_data(sectionid=data)

    await AddNewGame.photo.set()
    await call.message.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞")
# endregion

# region –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —é–∑–µ—Ä–∞
@dp.callback_query_handler(text="my_accounts")
async def info_my_accounts(call: types.CallbackQuery):
    data = db.get("SELECT * FROM games WHERE user_id = ?", (call.from_user.id,), False)
    await call.message.edit_caption(
        f"–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        parse_mode=types.ParseMode.HTML,
        reply_markup=myaccount(data)
    )
# endregion

# region –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º-–≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
@dp.callback_query_handler(text="accounts")
async def all_products(call: types.CallbackQuery):
    
    data = db.get("SELECT * FROM sections", (), False)
    await call.message.edit_caption(
        f"‚óΩÔ∏è‚óºÔ∏è‚óΩÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚óΩÔ∏è‚óºÔ∏è‚óΩÔ∏è",
        parse_mode=types.ParseMode.HTML,
        reply_markup=sectionsAdd(data)
    )
# endregion

# region –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ –ø–æ —Ä–∞–∑–¥–µ–ª—É
@dp.callback_query_handler(filters.Regexp("section*"))
async def buy(call, page=1):

    idsection = call.data.split("_")[1]

    data = db.get("SELECT * FROM games WHERE status = ? AND section_id = ?", (0, idsection), False)
    section = db.get("SELECT * FROM sections", (), False)

    if not data:
        await call.answer("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ")
    else:
        await call.message.edit_caption(
            f'–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ:',
            parse_mode=types.ParseMode.HTML,
            reply_markup=magazin(data, page)
        )

async def next_purcha(call, page):

    idsection = call.data.split("_")[1]

    data = db.get("SELECT * FROM games WHERE status = ? AND section_id = ?", (0, idsection), False)

    await call.message.edit_caption(
        f'–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ:',
        parse_mode=types.ParseMode.HTML,
        reply_markup=magazin(data, page)
    )

@dp.callback_query_handler(lambda call: call.data.startswith('and_mag_'))
async def next_pages(call):

    page = int(call.data.split('_')[2])
    await next_purcha(call, page)

@dp.callback_query_handler(lambda call: call.data.startswith('bac_mag_'))
async def prev_pages(call):
    
    page = int(call.data.split('_')[2])
    await buy(call, page)
# endregion

# region –ò–Ω—Ñ–æ–º—Ä–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
@dp.callback_query_handler(filters.Regexp("item*"))
async def view_info_products(call: types.CallbackQuery):

    item = call.data.split("_")[1]

    userinfo = db.get("SELECT * FROM games WHERE id = ?", (item,))
    user = db.get("SELECT * FROM users WHERE user_id = ?", (userinfo[6],))

    estimations = db.get("SELECT estimation FROM estimations WHERE userid = ?", (user[3],), False)
    if estimations:
        average_rating = sum(estimation[0] for estimation in estimations) / len(estimations)
    else:
        average_rating = 0

    if userinfo[6] == call.from_user.id:

        await call.message.delete()

        confedicialpassword = userinfo[5][:-5] + '******'
        confediciallogin = userinfo[4][:-4] + '*****'

        if userinfo[8] == 1:
            statys = 'üî∂–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
        else:
            statys = 'üü¢–¢–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω'
        await bot.send_photo(
        call.from_user.id, userinfo[1],
        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{userinfo[2]}</b>\n---------------------------------------\nüí∞ –¶–µ–Ω–∞: <b>{userinfo[3]}</b>$\n---------------------------------------\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>@{userinfo[7]}</b>\n---------------------------------------\nüìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>{user[6]}</b>\n---------------------------------------\nüìù –ü–∞—Ä–æ–ª—å: {confedicialpassword}\n---------------------------------------\nü™™ –õ–æ–≥–∏–Ω: {confediciallogin}\n---------------------------------------\n–°—Ç–∞—Ç—É—Å: <b>{statys}</b>",
        parse_mode="html",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"accounts")
            )
        )
    else:

        await call.message.delete()

        await bot.send_photo(
        call.from_user.id, userinfo[1],
        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{userinfo[2]}</b>\n---------------------------------------\nüí∞ –¶–µ–Ω–∞: <b>{userinfo[3]}</b>$\n---------------------------------------\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>@{userinfo[7]}</b>\n---------------------------------------\nüìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>{user[6]}</b>\n---------------------------------------\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {average_rating}",
        parse_mode="html",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"add_garant_{userinfo[0]}"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"accounts")
            )
        )
# endregion

# region –°–¥–µ–ª–∫–∞ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
@dp.callback_query_handler(filters.Regexp("add_garant*"))
async def garant(call: types.CallbackQuery):
    try:
        item = call.data.split("_")

        products = db.get("SELECT * FROM games WHERE id = ?", (item[2],))
        summ_sdel = products[3]
        userid = products[6]

        mybalance = db.get("SELECT * FROM users WHERE user_id = ?", (call.from_user.id,))

        if mybalance[8] == 1:
            await call.message.edit_caption("–ù–µ–ª—å–∑—è –∏–º–µ—Ç—å –±–æ–ª–µ–µ 1 –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏", reply_markup=profile_keyboard)
        else:
            if mybalance[5] < products[3]:
                await call.message.edit_caption("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=add_balance)
            else:

                db.change("UPDATE games SET status = ? WHERE id = ?", (3, products[0]))

                await call.message.edit_caption("–û–∂–∏–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏...")
                await bot.send_message(userid,
                    f"üîî–í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É\n‚ñ´C—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {summ_sdel}$\n‚óª–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{call.from_user.username}\n–û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ -{products[2]}-",
                    reply_markup = InlineKeyboardMarkup(row_width=1).add(
                            InlineKeyboardButton("üü©–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"next_{call.from_user.id}_{item[2]}"),
                            InlineKeyboardButton("üü•–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏", callback_data=f"minys_{call.from_user.id}_{products[0]}")
                        )
                    )
    except:
        await call.message.answer("–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏")


@dp.callback_query_handler(filters.Regexp("next*"))
async def garant_al(call: types.CallbackQuery):
    item = call.data.split("_")

    users = db.get("SELECT * FROM users WHERE user_id = ?", (item[1],))
    products = db.get("SELECT * FROM games WHERE id = ?", (item[2],))

    await call.message.edit_text(f"üü¢–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ —Å–¥–µ–ª–∫—É —Å @{users[1]}üü¢")

    newbalance = users[5] - products[3]
    
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (1, item[1]))
    db.change("UPDATE users SET balance = ? WHERE user_id = ?", (newbalance, item[1]))

    await bot.send_message(item[1], f"üü©–ü—Ä–æ–¥–∞–≤–µ—Ü {call.from_user.username} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Å–¥–µ–ª–∫—Éüü©\n–õ–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {products[4]}\n–ü–∞—Ä–æ–ª—å: {products[5]}",
                    reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton(text="ü§ù –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"endp_{products[0]}_{call.from_user.id}"),
                InlineKeyboardButton(text="‚úçüèø –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"https://t.me/{call.from_user.username}"),
                InlineKeyboardButton(text="üó£ –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"spor_{products[0]}_{call.from_user.id}")
            )
        )
    
    db.change("INSERT INTO confirmation VALUES(?, ?, ?, ?, ?, ?)", (products[0], products[1], products[2], products[3], products[4], products[5]))
    db.change("DELETE FROM games WHERE id=?", (item[2],))

@dp.callback_query_handler(filters.Regexp("spor*"))
async def spor(call: types.CallbackQuery):

    diskushion = call.data.split("_")

    users = db.get("SELECT * FROM users WHERE user_id = ?", (diskushion[2],))
    products = db.get("SELECT * FROM confirmation WHERE id = ?", (diskushion[1],))

    await call.message.edit_text(f"üí∏–ú–µ–Ω—è –æ–±–º–∞–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{users[1]}\n‚ùóÔ∏è–ù–∞ —Å—É–º–º—É: {products[3]}$\nüì©–û—Ç–ø—Ä–≤–∏—Ç—å –∂–∞–ª–æ–±—É?",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="üì• –û—Ç–ø—Ä–≤–∏—Ç—å", callback_data=f"send_{diskushion[2]}_{diskushion[1]}"),
            InlineKeyboardButton(text="‚≠ïÔ∏è –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"endp_{products[0]}_{call.from_user.id}")
            )
        )

@dp.callback_query_handler(filters.Regexp("send*"))
async def add_db(call: types.CallbackQuery):

    warning = call.data.split("_")

    products = db.get("SELECT * FROM confirmation WHERE id = ?", (warning[2],))

    await call.message.delete()
    await bot.send_photo(call.from_user.id,
    photo=types.InputFile(open("photos/image.png", "rb")),
    caption="‚úÖ–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\nüí§–û–∂–∏–¥–∞–π—Ç–µ.....",
    reply_markup=start_keyboard
    )

    db.change("INSERT INTO dispute VALUES(NULL, ?, ?, ?)", (call.from_user.id, products[3], warning[1]))
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (0, call.from_user.id))
    db.change("DELETE FROM confirmation WHERE id = ?", (warning[2],))

@dp.callback_query_handler(filters.Regexp("minys"))
async def garant_adl(call: types.CallbackQuery):

    debag = call.data.split("_")

    users = db.get("SELECT * FROM users WHERE user_id = ?", (debag[1],))

    await call.message.edit_text(f"üî¥–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏ c @{users[1]}üî¥")
    await bot.send_message(debag[1], "üü•–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏üü•")
    
    db.change("UPDATE games SET status = ? WHERE id = ?", (0, debag[2]))

@dp.callback_query_handler(filters.Regexp("endp*"))
async def garant_end(call: types.CallbackQuery):

    item = call.data.split("_")

    users = db.get("SELECT * FROM users WHERE user_id = ?", (item[2],))
    users_deal = db.get("SELECT * FROM users WHERE user_id = ?", (call.from_user.id,))
    products = db.get("SELECT * FROM confirmation WHERE id = ?", (item[1],))

    transaction_statusone = users[6] + 1
    transaction_statustwo = users_deal[6] + 1

    await call.message.edit_text(
        f"‚ùáÔ∏è–°–¥–µ–ª–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{users[1]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\nüí†–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ: {products[3]}$\n–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–¥–∞–≤—Ü—É",
        reply_markup=InlineKeyboardMarkup(row_width=2).add(
                        InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"postav_{users[0]}"),
                        InlineKeyboardButton(text="–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="backMenus")
                    )
        )
    newbalance = users[5] + products[3]

    db.change("INSERT INTO my_buy_products VALUES(NULL, ?, ?, ?, ?, ?)", (call.from_user.id, products[2], products[4], products[5], products[3]))
    db.change("UPDATE users SET balance = ?, number_transactions = ? WHERE user_id = ?", (newbalance, transaction_statusone, item[2],))
    db.change("UPDATE users SET transaction_status = ?, number_transactions = ? WHERE user_id = ?", (0, transaction_statustwo, call.from_user.id))

    await bot.send_message(item[2], f"–°–¥–µ–ª–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{call.from_user.username} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {products[3]}$")

    db.change("DELETE FROM confirmation WHERE id = ?", (item[1],))

@dp.callback_query_handler(filters.Regexp("postav*"), state=None)
async def add_once(call: types.CallbackQuery):

    data = call.data.split("_")

    keyboard = InlineKeyboardMarkup(row_width=2)
    for barbi in range(1, 6):
        keyboard.add(*[InlineKeyboardButton(str(barbi), callback_data=f"barber_{barbi}_{data[1]}")])
    await call.message.edit_text(
        "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5",
        reply_markup=keyboard
    )
    await Estimation.estimation.set()

@dp.callback_query_handler(filters.Regexp("barber*"), state=Estimation.estimation)
async def process_estimation(call: types.CallbackQuery, state: FSMContext):

    estimation = call.data.split("_")

    users = db.get("SELECT * FROM users WHERE id = ?", (estimation[2],))

    if estimation[1].isdigit() and 1 <= int(estimation[1]) <= 5:

        await call.message.delete()
        await bot.send_photo(
            call.from_user.id,
            photo=types.InputFile(open("photos/image.png", "rb")),
            caption=f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {estimation[1]}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{users[1]}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞", reply_markup=start_keyboard)

        db.change("INSERT INTO estimations VALUES(?, ?)", (estimation[1] , users[3]))

        await state.finish()
    else:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5")
# endregion

# endregion

# region –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.callback_query_handler(text="profile_button")
async def process_profile_command(call: types.CallbackQuery):
    
    users = db.get("SELECT * FROM users WHERE user_id = ?", (call.from_user.id,))
    date = datetime.datetime.fromtimestamp(users[2]).strftime('%d.%m.%Y')

    estimations = db.get("SELECT * FROM estimations WHERE userid = ?", (call.from_user.id,), False)

    if estimations:
        average_rating = sum(estimation[0] for estimation in estimations) / len(estimations)
    else:
        average_rating = 0

    await call.message.edit_caption(
        f"üë§–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n----------------------------------------------\nüìÉ–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{call.from_user.username}</code>\n‚è≥–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <u>{date}</u>\nüëë–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {users[6]}\n----------------------------------------------\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: <b>{average_rating}</b>\n----------------------------------------------\nüíµ<b>–ë–∞–ª–∞–Ω—Å: <code>{users[5]}</code>$</b>\n----------------------------------------------\n‚öñ–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–≤–µ–¥–µ–Ω–æ –≤ –±–æ—Ç–∞: {users[9]}$\n‚öñ–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ —Å –±–æ—Ç–∞: 0$",
        parse_mode=types.ParseMode.HTML,
        reply_markup=profile_keyboard
    )
# endregion

# region –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö
@dp.callback_query_handler(text="my_purchases_button")
async def show_purchases(call, page=1):

    data = db.get("SELECT * FROM my_buy_products WHERE user_id = ?", (call.from_user.id,), False)
    if not data:
        await call.message.edit_caption("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –ø–æ–∫—É–ø–æ–∫", reply_markup=profile_keyboard)
    else:
        await call.message.edit_caption(
            f'üõí‚Äç –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:',
            parse_mode=types.ParseMode.HTML,
            reply_markup=paginator(data, page)
        )

async def next_purchases(call, page):
    data = db.get("SELECT * FROM my_buy_products WHERE user_id = ?", (call.from_user.id,), False)
    await call.message.edit_caption(
        f'üõí‚Äç –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:',
        parse_mode=types.ParseMode.HTML,
        reply_markup=paginator(data, page)
    )

@dp.callback_query_handler(lambda call: call.data.startswith('and_str_'))
async def next_page(call):
    page = int(call.data.split('_')[2])
    await next_purchases(call, page)

@dp.callback_query_handler(lambda call: call.data.startswith('bac_str_'))
async def prev_page(call):
    page = int(call.data.split('_')[2])
    await show_purchases(call, page)
# endregion 

# region –ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query_handler(text="add_balance_button")
async def procces_pop_balance(call: types.CallbackQuery):

    await call.message.edit_caption(
        'üí≥ <i>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</i>\n‚ùì<u><b>–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"</b></u>\n<b>‚ö†Ô∏è–ß—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞</b>\n<b>‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å</b>',
        parse_mode="html",
        reply_markup = add_balance
    )
# endregion

# region –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —é–∑–µ—Ä–∞
@dp.callback_query_handler(text="add_balance_users", state=None)
async def process_add_balance_command(call: types.CallbackQuery, state: FSMContext):

    await call.message.delete()
    await call.message.answer(
        'üí≤–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
        parse_mode="html"
    )
    await Payment.currency.set()

@dp.callback_query_handler(text="USDT", state=Payment.network)
async def add_network_usdt(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(network="USDT")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –±–ª–æ–∫—á–µ–π–Ω–∞",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text="TRON", callback_data="TRON")
            )
        )
    await Payment.amount.set()

@dp.callback_query_handler(text="TRX", state=Payment.network)
async def add_network_trx(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(network="TRX")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –±–ª–æ–∫—á–µ–π–Ω–∞",
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text="TRON", callback_data="TRON")
            )
        )
    await Payment.amount.set()

@dp.callback_query_handler(text="TRON", state=Payment.amount)
async def add_amount(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(amount="TRON")
    await call.message.edit_text("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É",
        reply_markup=InlineKeyboardMarkup(row_width=True).add(
            InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="replenishment")
            )
        )
    await Payment.end.set()

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
@dp.callback_query_handler(text="replenishment", state=Payment.end)
async def adding_funds_account(call: types.CallbackQuery, state: FSMContext):

    number = db.get("SELECT * FROM order_id", (), False)
    update = number[0][1]
    update_number = update+1
    data = await state.get_data()

    data_payment = {
    'amount': data['currency'],
    'currency': "USD",
    'network': data['amount'],
    'order_id': f"{update}",
    'url_return': 'https://example.com/return',
    'url_callback': 'https://example.com/callback',
    'is_payment_multiple': False,
    'lifetime': '7200',
    'to_currency': data['network']
    };

    result = payment.create(data_payment)
    result_url = result["url"]

    db.change("UPDATE order_id SET number = ?", (update_number,))

    await call.message.edit_text(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç",
        reply_markup = InlineKeyboardMarkup(row_width=1).add(
                       InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è", url=f"{result_url}"),
                       InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"{update}_ch_{data['currency']}")
                    )
    )
    await state.finish()

@dp.callback_query_handler(filters.Regexp("ch"))
async def pay_moment(call: types.CallbackQuery):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    params = call.data.split("_")
    data = {
        "uuid": "a7c0caec-a594-4aaa-b1c4-77d511857594",
        "order_id": f"{params[0]}"
    }

    result_p = payment.info(data)

    if result_p["payment_status"] == 'paid':
        await bot.send_photo(call.from_user.id,
        photo=types.InputFile(open("photos/image.png", "rb")),
        caption=f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {params[2]}$",
        reply_markup = my_purchases_keyboard
        )

        total_received_balance = db.get("SELECT balance, total_received, referrer_id, number_deposits FROM users WHERE user_id = ?", (call.from_user.id,))

        if total_received_balance[2] != None:

            if total_received_balance[3] == 0:

                referrer = db.get("SELECT balance FROM users WHERE user_id = ?", (total_received_balance[2],))

                balance_referrer = float(params[2]) * 0.05
                new_referrer = float(referrer[0]) + balance_referrer
                number_deposits = total_received_balance[3] + 1
                total_received = total_received_balance[1] + float(params[2])
                balance = total_received_balance[0] + float(params[2])

                db.change("UPDATE users SET balance = ?, total_received = ?, number_deposits = ? WHERE user_id = ?", (balance, total_received, number_deposits, call.from_user.id))
                db.change("UPDATE users SET balance = ? WHERE user_id = ?", (new_referrer, total_received_balance[2]))

            else:

                total_received = total_received_balance[1] + float(params[2])
                balance = total_received_balance[0] + float(params[2])

                db.change("UPDATE users SET balance = ?, total_received = ? WHERE user_id = ?", (balance, total_received, call.from_user.id))

        else:

            total_received = total_received_balance[1] + float(params[2])
            balance = total_received_balance[0] + float(params[2])

            db.change("UPDATE users SET balance = ?, total_received = ? WHERE user_id = ?", (balance, total_received, call.from_user.id))

    elif result_p["payment_status"] == 'check':
        await bot.send_message(call.from_user.id, "‚ôªÔ∏è–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    else:
        await bot.send_message(call.from_user.id, "‚ôªÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
# endregion

# region –ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
@dp.callback_query_handler(text="withdraw_money_button")
async def payments_procces(call: types.CallbackQuery):

    await call.message.edit_caption(
        'üí≥ <i>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</i>\n‚ùì<u><b>–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"</b></u>\n<b>‚ö†Ô∏è–ß—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–≤–æ–¥—É —Å—Ä–µ–¥—Å—Ç–≤</b>\n<b>‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏</b>',
        parse_mode="html",
        reply_markup = autput_balance
    )
# endregion

# region –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
@dp.callback_query_handler(text="autput_balance_users", state=None)
async def process_withdraw_balance_command(call: types.CallbackQuery):

    await call.message.reply(
        'üí≤–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:',
        parse_mode="html"
    )
    await Payment–°onclusion.amount.set()

@dp.callback_query_handler(text="usdt", state=Payment–°onclusion.currency)
async def add_currency(call: types.CallbackQuery, state: FSMContext):

    await state.update_data(currency="USDT")
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–µ–≤–æ–π –∫–æ–¥ –±–ª–æ–∫—á–µ–π–Ω–∞",

        reply_markup=InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton(text="TRON", callback_data="trons")
            )
        )
    await Payment–°onclusion.network.set()

@dp.callback_query_handler(text="trons", state=Payment–°onclusion.network)
async def add_network(call: types.CallbackQuery, state: FSMContext):

    await state.update_data(network="TRON")
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫",)
    await Payment–°onclusion.address.set()

@dp.callback_query_handler(text="confirm", state=Payment–°onclusion.end)
async def output_balance(call: types.CallbackQuery, state: FSMContext):
    
    balance = db.get("SELECT * FROM users WHERE user_id = ?", (call.from_user.id,))
    order = db.get("SELECT number FROM order_id", ())[0]
    print(order)
    output = await state.get_data()

    if float(output['amount']) > balance[5]:
        await call.message.edit_text(f"—É –≤–∞—Å –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ—Ç—É —Å—É–º–º—ã: {output['amount']}$")
    else:
        data = {
        'amount': output['amount'],
        'currency': output['currency'],
        'network': output['network'],
        'order_id': order,
        'address': output['address'],
        'is_subtract': '1',
        'url_callback': 'https://example.com/callback'
        }

        new_order = float(order) + 1
        db.change("UPDATE order_id SET number = ?", (new_order,))

        result = payout.create(data)
        await call.message.edit_text("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n–í–∏–¥–∏–º–æ –∫–∞–∫–∏–µ —Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=suppurt)
    await state.finish()
# endregion

# region –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.callback_query_handler(text="referal_system_button")
async def process_referal_command(call: types.CallbackQuery):

    await call.message.edit_caption(
        caption=f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/{cfg.BOT_NICKNAME}?start={call.from_user.id}</code>",
        parse_mode="html",
        reply_markup = referal_system_keyboard
    )

@dp.callback_query_handler(text="your_referals_button")
async def process_your_referals_command(call: types.CallbackQuery):

    await call.message.edit_caption(
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.count_referals(call.from_user.id)}",
        parse_mode="html",
        reply_markup = your_referals_keyboard
    )
# endregion

# region –°–¥–µ–ª–∫–∞ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞
@dp.callback_query_handler(text="guarantee_deal_button")
async def process_guarntee_command(call: types.CallbackQuery):

    with open(f"photos/bitoc.png", 'rb') as file:
        photo = types.InputMediaPhoto(file)
        await call.message.edit_media(media=photo)

    await call.message.edit_caption(
        f"‚ñ™ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚ñ´\nüî∏–í–∞–∂–Ω–æ: –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫",
        parse_mode=types.ParseMode.HTML,
        reply_markup=guarantee_deal_keyboard
    )
# endregion

# region –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞
@dp.callback_query_handler(text="buyer_button", state=None)
async def start_deal(call: types.CallbackQuery, state: FSMContext):

# –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –¥–µ–Ω–µ–≥ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É
    subtraction_balance = db.get("SELECT balance FROM users WHERE user_id = ?", (call.from_user.id,))[0]
    if subtraction_balance <= 0:       
        with open(f"photos/bitoc.png", 'rb') as file:
            photo = types.InputMediaPhoto(file)
            await call.message.edit_media(media=photo)

        await call.message.edit_caption(
            f"üí¢–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É —Å 0$ –Ω–∞ —Å—á–µ—Ç—É\nüíµ–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç",
            parse_mode=types.ParseMode.HTML,
            reply_markup=no_money
        )
    else:
        transaction_status = db.get("SELECT transaction_status FROM users WHERE user_id = ?", (call.from_user.id,))[0]
        if transaction_status == 1:
            await call.message.edit_caption("‚õîÔ∏è–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ 1 –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏\n‚õîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É", reply_markup = start_keyboard)
        else:
            await call.message.delete()
            await call.message.answer("‚ñ´–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:\n‚ñ™–ø—Ä–∏–º–µ—Ä: üî∏5$ / üî∏$5.23\n‚óº–í–∞–∂–Ω–æ: –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ –∑–Ω–∞–∫–∞ '$'")
            await StateMessage.translation.set()

@dp.callback_query_handler(state=StateMessage.end, text=["end–ïransaction"])
async def call_sss(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()

    await call.message.edit_text(
        f"‚ñ´–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['translation']}$\n‚óªNickName –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{data['nickname']}\n‚ö™–£—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏: {data['description']}",
        parse_mode=types.ParseMode.HTML,
        reply_markup=my_purchases_keyboard
    )

    db.change("UPDATE users SET transaction_status = ?, summ_input = ? WHERE user_id = ?", (1, data['translation'], call.from_user.id))
    
    await bot.send_message(data['userid'][0],
                f"üîî–í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É\n‚ñ´C—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['translation']}$\n‚óª–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{call.from_user.username}\n‚ö™–£—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏: {data['description']}",
                reply_markup = InlineKeyboardMarkup(row_width=1).add(
                        InlineKeyboardButton("üü©–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"done_{call.from_user.id}_{data['translation']}"),
                        InlineKeyboardButton("üü•–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏", callback_data=f"cencel_{call.from_user.id}")
                    )           
                )
    await state.finish()
# endregion

# region –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@dp.callback_query_handler(filters.Regexp("done*"))
async def garant_sistem_yes(call: types.CallbackQuery):
    
     # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = call.data.split("_")

    balance = db.get("SELECT balance, summ_input FROM users WHERE user_id = ?", (params[1],))
#   –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, —Ç–æ —É —Ç–æ–≥–æ –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç    
    newsumm = balance[0] - balance[1]
    
    db.change("UPDATE users SET balance = ? WHERE user_id = ?", (newsumm, params[1],))
    username = db.get("SELECT login, user_id FROM users WHERE user_id = ?", (params[1],))
    
    await call.message.edit_text(
        f"–í –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username[0]}",
        reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton(text="‚úçüèø –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"https://t.me/{username[0]}")
            )
        )
    
    await bot.send_message(params[1],
                f"\n\nüü© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Å–¥–µ–ª–∫—É",
                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                        InlineKeyboardButton(text="ü§ù–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"addbalance_{call.from_user.id}"),
                        InlineKeyboardButton(text="‚úçüèø –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"https://t.me/{call.from_user.username}"),
                        InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dataget_{username[1]}")
                    )
                )
    
@dp.callback_query_handler(filters.Regexp("dataget_*"))
async def dataget(call: types.CallbackQuery):

    data = call.data.split("_")[1]

    cheater = db.get("SELECT * FROM users WHERE user_id = ?", (data,))
    users = db.get("SELECT * FROM users WHERE user_id = ?", (call.from_user.id,))

    await call.message.answer(
        f"–ú–µ–Ω—è –æ–±–º–∞–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cheater[1]}, –Ω–∞ —Å—É–º–º—É {cheater[7]}",
        reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="üì• –û—Ç–ø—Ä–≤–∏—Ç—å", callback_data=f"fraud_{cheater[3]}")
            )
        )

@dp.callback_query_handler(filters.Regexp("fraud*"))
async def flaud(call: types.CallbackQuery):

    data = call.data.split("_")[1]

    await call.message.answer("Lf FLlwerk;fkwr")

    cheater = db.get("SELECT * FROM users WHERE user_id = ?", (data,))
    print(call.from_user.id, cheater[7], cheater[3])
    db.change("INSERT INTO dispute VALUES(NULL, ?, ?, ?)", (call.from_user.id, cheater[7], cheater[3]))

@dp.callback_query_handler(filters.Regexp("addbalance*"))
async def if_garant_sistem(call: types.CallbackQuery):
    
    params = call.data.split("_")
        
    replenishment = db.get("SELECT summ_input FROM users WHERE user_id = ?", (call.from_user.id,))[0]
    user_recipient = db.get("SELECT balance, login FROM users WHERE user_id = ?", (params[1],))

    await call.message.delete()
    await bot.send_photo(params[1], photo=types.InputFile(open("photos/image.png", "rb")), caption=f"–°–¥–µ–ª–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {call.from_user.username} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –≤–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {replenishment}$", reply_markup = start_keyboard)
    await bot.send_photo(
        call.from_user.id,
        photo=types.InputFile(open("photos/image.png", "rb")),
        caption=f"–°–¥–µ–ª–∫–∞ c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_recipient[1]} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å, —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ: {replenishment}$", reply_markup = start_keyboard)
    
    newbalance = user_recipient[0] + replenishment

    onenumber_transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (params[1],))[0]
    twonumber_transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (call.from_user.id,))[0]

    onenumber_transactions = onenumber_transactions + 1
    twonumber_transactions = twonumber_transactions + 1
    
    db.change("UPDATE users SET transaction_status = ?, summ_input = ?, number_transactions = ? WHERE user_id = ?", (0, 0, twonumber_transactions, call.from_user.id,))
    db.change("UPDATE users SET balance = ?, number_transactions = ? WHERE user_id = ?", (newbalance, onenumber_transactions, params[1],))
# endregion

# region –æ—Ç–∫–∞–∑ –æ—Ç —Å–¥–µ–ª–∫–∏ 
@dp.callback_query_handler(filters.Regexp("cencel*"))
async def garans_sistem(call: types.CallbackQuery):
    
     # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = call.data.split("_")
    
    db.change("UPDATE users SET summ_input = ? WHERE user_id = ?", (0, params[1],))
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (0, params[1],))
    username = db.get("SELECT * FROM users WHERE user_id = ?", (params[1],))
    
    await bot.send_photo(
        call.from_user.id,
        photo=types.InputFile(open("photos/image.png", "rb")),
        caption=f"üü•–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username[1]}", reply_markup = start_keyboard)
    await bot.send_photo(params[1], photo=types.InputFile(open("photos/image.png", "rb")), caption=f"\n\nüü• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É",
                                reply_markup=start_keyboard
    )
# endregion

# region –ø–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query_handler(text="support_button")
async def process_support_command(call: types.CallbackQuery):

    await call.message.edit_caption(
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n-------------------------------------------------------------\n@shshshgsuw2 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n-------------------------------------------------------------\n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–∞–∫–æ–π –ª–∏–±–æ –æ—à–∏–±–∫–∏\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        parse_mode=types.ParseMode.HTML,
        reply_markup=profile_keyboard
    )
# endregion

# region –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(state=StateMessage.end, text=["backMenu_after_deal"]) 
async def back_menu(call: types.CallbackQuery, state: FSMContext):

    await bot.send_photo(
        call.from_user.id,
        photo=types.InputFile(open("photos/image.png", "rb")),
        caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode="html",
        reply_markup = start_keyboard
    )
    await state.finish() 

@dp.callback_query_handler(text="backMenu")
async def back_menu_deal(call: types.CallbackQuery):

    with open(f"photos/image.png", 'rb') as file:
        photo = types.InputMediaPhoto(file)
        await call.message.edit_media(media=photo)

    await call.message.edit_caption(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode=types.ParseMode.HTML,
        reply_markup=start_keyboard
    )

@dp.callback_query_handler(text="backMenus")
async def process_backMenu_command(call: types.CallbackQuery):

    await call.message.delete()
    await bot.send_photo(
        call.from_user.id,
        photo=types.InputFile(open("photos/image.png", "rb")),
        caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode=types.ParseMode.HTML,
        reply_markup=start_keyboard
    )
 
@dp.callback_query_handler(text="backGuaranteeMenu")
async def process_backGuaranteeMenu_command(call: types.CallbackQuery):

    await call.message.edit_text(
        'üì¨ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É: ',
        parse_mode="html",
        reply_markup = guarantee_deal_keyboard
    )
# endregion

@dp.callback_query_handler(filters.Regexp("myprid"))
async def callback_query(call: types.CallbackQuery):

    review = call.data.split("_")[1]
    myprod = db.get("SELECT * FROM my_buy_products WHERE id = ?", (review,))
    await call.message.edit_caption(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {myprod[2]}\n–õ–æ–≥–∏–Ω: {myprod[3]}\n–ü–∞—Ä–æ–ª—å: {myprod[4]}\n–¶–µ–Ω–∞: {myprod[5]}",
        reply_markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="my_purchases_button")
            )
        )