from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import filters
from keyboards.keyboard import *
from states.States import *
from loader import dp, db, bot
from cryptomus import Client
import config as cfg
import datetime

# –Ω–∞ –≤—ã–≤–æ–¥
PAYOUT_KEY = 'Dt0xmkKOcb5AFPGLzV1T7A925pGAlAV2kNOxzzy6wKKSEw3iIWfCAmDgRK5bFUOuB130UuVS5CJCl1JkVNxra2LvlKlDkExD2d9OAu1wus2KsWKV6CsZ0XhZjTw219q1'
MERCHANT_UUID = 'e1c2e3c5-9e75-4438-a6f6-746a362d4bf6'

payout = Client.payout(PAYOUT_KEY, MERCHANT_UUID)
# –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
PAYMENT_KEY = 'qd38AHmwZu9cIPVUDyfe3DZ2ezvWlkWuy5S2vv2jtoSJB8gC562ZFYfzeSphocBa8KTk3LB47cRTzzrNdb5CIRKbiTWSOy2AMettnI0YYPgI43aViJUnSbA0andEQsq8'

payment = Client.payment(PAYMENT_KEY, MERCHANT_UUID)

@dp.callback_query_handler(text="profile_button")
async def process_profile_command(call: types.CallbackQuery):
    
    users = db.get("SELECT date_register, balance, number_transactions, total_received FROM users WHERE user_id = ?", (call.from_user.id,))
    date = datetime.datetime.fromtimestamp(users[0]).strftime('%d.%m.%Y')
    
    await call.message.edit_text(
        f"üë§–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n----------------------------------------------\nüìÉ–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{call.from_user.username}</code>\n‚è≥–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <u>{date}</u>\nüëë–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {users[2]}\n----------------------------------------------\nüíµ<b>–ë–∞–ª–∞–Ω—Å: <code>{users[1]}</code>$</b>\n----------------------------------------------\n‚öñ–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–≤–µ–¥–µ–Ω–æ –≤ –±–æ—Ç–∞: {users[3]}$\n‚öñ–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ —Å –±–æ—Ç–∞: 0$",
        parse_mode="html",
        reply_markup = profile_keyboard
    )
    
@dp.callback_query_handler(text="support_button")
async def process_support_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n@wolfsblood550 - –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n@lolzcoder_star - –î–∏—Ä–µ–∫—Ç–æ—Ä\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø–æ –ø–æ–≤–æ–¥—É –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É",
        parse_mode="html",
        reply_markup = support_keyboard
    )


# –∫–æ–Ω–æ–ø–æ—á–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text="add_balance_button")
async def process_withdraw_balance_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üí≥ <i>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</i>\n<b>‚ö†Ô∏è–ß—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞</b>\n<b>‚ö†Ô∏è–ù–∞–∂–º–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å</b>',
        parse_mode="html",
        reply_markup = add_balance
    )

@dp.callback_query_handler(text="add_balance_users", state=None)
async def process_add_balance_command(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        'üí≤–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
        parse_mode="html"
    )
    await Payment.currency.set()

@dp.callback_query_handler(text="ad", state=None)
async def process_withdraw_balance_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üí≤–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:',
        parse_mode="html"
    )
    await Payment–°onclusion.currency.set()
    
@dp.callback_query_handler(text="referal_system_button")
async def process_referal_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/{cfg.BOT_NICKNAME}?start={call.from_user.id}</code>",
        parse_mode="html",
        reply_markup = referal_system_keyboard
    )
    
@dp.callback_query_handler(text="guarantee_deal_button")
async def process_guarntee_command(call: types.CallbackQuery):
    await call.message.edit_text(
        '‚ñ™ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚ñ´\nüî∏–í–∞–∂–Ω–æ: –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫',
        parse_mode="html",
        reply_markup = guarantee_deal_keyboard
    )
    
@dp.callback_query_handler(text="my_purchases_button")
async def process_purchases_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üõí‚Äç –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É ',
        parse_mode="html",
        reply_markup = my_purchases_keyboard
    )
    
@dp.callback_query_handler(text="market_button")
async def process_market_command(call: types.CallbackQuery):
    await call.message.edit_text(
        '‚öôÔ∏è<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª</i></b>‚öôÔ∏è',
        parse_mode="html",
        reply_markup = market_keyboard
    )   

#–ö–Ω–æ–ø–∫–∏ —Ä—ã–Ω–∫–∞
    
@dp.callback_query_handler(text="accounts_button")
async def process_accounts_command(call: types.CallbackQuery):
    
    await call.message.edit_text(
          f"‚ùï<u><b>–ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É</b></u>\nüíÆ–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã\n----------------------------------------------------------------\n‚ùï<u><b>–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∏–º–µ—é—â–∏–π—Å—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç</b></u>\nüíÆ–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º",
         reply_markup = accounts_keyboard
     )

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–µ—Ç–∞—Ö
@dp.callback_query_handler(text="useraccounts")
async def add_product(call: types.CallbackQuery):

    await call.message.edit_text(
        f"üíÆ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—ÖüíÆ",
        reply_markup=new_accounts
        )

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.callback_query_handler(text="add_new")
async def procces_add_accounts(call: types.CallbackQuery):

    await call.message.edit_text(
        "üíÆ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∞—à –ø—Ä–æ–¥—É–∫—ÇüõÑ",
        reply_markup=back_add_new
        )

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä—ã
@dp.callback_query_handler(text="add_new_accounts_game", state=None)
async def add_new_accounts(call: types.CallbackQuery):
    await AddNewGame.photo.set()
    await call.message.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞")


@dp.callback_query_handler(text="accounts")
async def all_products(call: types.CallbackQuery):
    
    await call.message.edit_text("‚óΩÔ∏è‚óºÔ∏è‚óΩÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚óΩÔ∏è‚óºÔ∏è‚óΩÔ∏è", reply_markup=account_sections)

@dp.callback_query_handler(text="games")
async def all_games(call: types.CallbackQuery):
    for reg in db.get("SELECT * FROM games", (), False):
        await bot.send_photo(
            call.from_user.id, reg[1],
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: {reg[2]}\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞: {reg[3]}",
            reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="test1")
                )
            )

@dp.callback_query_handler(text="test1")
async def steam(call: types.CallbackQuery):
    await call.answer("ü´†–ü–æ–∫–∞ —á—Ç–æ –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µü´†", show_alert=True)

@dp.callback_query_handler(text="wallets")
async def steam(call: types.CallbackQuery):
    await call.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ‚ö†Ô∏è", show_alert=True)
    
@dp.callback_query_handler(text="manuals_button")
async def process_manuals_command(call: types.CallbackQuery):
    await call.answer("‚ö†Ô∏è–ü–æ–∫–∞ —á—Ç–æ –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ‚ö†Ô∏è", show_alert=True)
    
    
#–ö–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

@dp.callback_query_handler(text="your_referals_button")
async def process_your_referals_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.count_referals(call.from_user.id)}",
        parse_mode="html",
        reply_markup = your_referals_keyboard
    )

#–ö–ù–û–ü–ö–ò –°–î–ï–õ–ö–ò –° –ì–ê–†–ê–ù–¢–û–ú
    
# –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É–º–º—ã   
@dp.callback_query_handler(text="buyer_button", state=None)
async def start_deal(call: types.CallbackQuery, state: FSMContext):

# –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –¥–µ–Ω–µ–≥ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É
    subtraction_balance = db.get("SELECT balance FROM users WHERE user_id = ?", (call.from_user.id,))
    for subtraction_balance in subtraction_balance:
        pass
    if subtraction_balance <= 0:       
        await call.message.edit_text("üí¢–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É —Å 0$ –Ω–∞ —Å—á–µ—Ç—É\nüíµ–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç",
                                     reply_markup = no_money
                                     )
    else:
        transaction_status = db.get("SELECT transaction_status FROM users WHERE user_id = ?", (call.from_user.id,))
        for i in transaction_status:
            pass
        if i == 1:
            await call.message.edit_text("‚õîÔ∏è–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ 1 –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏\n‚õîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É", reply_markup = start_keyboard)
        else:       
            await call.message.edit_text("‚ñ´–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:\n‚ñ™–ø—Ä–∏–º–µ—Ä: üî∏5$ / üî∏$5.23\n‚óº–í–∞–∂–Ω–æ: –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ –∑–Ω–∞–∫–∞ '$'")
            await StateMessage.translation.set()

# –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query_handler(state=StateMessage.end, text=["end–ïransaction"])
async def call_sss(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    
    await call.message.edit_text(
        f"‚ñ´–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['translation']}$\n‚óªNickName –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{data['nickname']}\n‚ö™–£—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏: {data['description']}",
        reply_markup = my_purchases_keyboard
    )
    money = data['translation']

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–¥–µ–ª–∫—É –µ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 1
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (1, call.from_user.id))
    db.change("UPDATE users SET summ_input = ? WHERE user_id = ?", (money, call.from_user.id,))
    
    await bot.send_message(data['userid'][0],
                f"üîî–í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É\n‚ñ´C—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['translation']}$\n‚óª–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{call.from_user.username}\n‚ö™–£—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏: {data['description']}",
                reply_markup = InlineKeyboardMarkup(row_width=1).add(
                        InlineKeyboardButton("üü©–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"done_{call.from_user.id}"),
                        InlineKeyboardButton("üü•–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏", callback_data=f"cencel_{call.from_user.id}")
                    )           
                )
    await state.finish()
    
@dp.callback_query_handler(filters.Regexp("done*"))
async def callback_query(call: types.CallbackQuery):
    
     # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = call.data.split("_")

    balance = db.get("SELECT balance FROM users WHERE user_id = ?", (params[1],))
    summ_input = db.get("SELECT summ_input FROM users WHERE user_id = ?", (params[1],))
    
#   –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, —Ç–æ —É —Ç–æ–≥–æ –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç
    for balance in balance:
        pass
    for summ in summ_input:
        pass
    
    newsumm = balance - summ
    
    db.change("UPDATE users SET balance = ? WHERE user_id = ?", (newsumm, params[1],))
    username = db.get("SELECT login FROM users WHERE user_id = ?", (params[1],))
    for username in username:
        pass
    
    await call.message.edit_text(f"–í –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")
    await bot.send_message(params[1],
                f"\n\nüü© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Å–¥–µ–ª–∫—É",
                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"addbalance_{call.from_user.id}")
                    )
                )
    
@dp.callback_query_handler(filters.Regexp("addbalance*"))
async def callback_query(call: types.CallbackQuery):
    
    params = call.data.split("_")
        
    replenishment = db.get("SELECT summ_input FROM users WHERE user_id = ?", (call.from_user.id,))
    user_recipient = db.get("SELECT balance FROM users WHERE user_id = ?", (params[1],))
    username = db.get("SELECT login FROM users WHERE user_id = ?", (params[1],))
    for replenishment in replenishment:
        pass
    for user_recipient in user_recipient:
        pass
    for username in username:
        pass
    await bot.send_message(params[1], f"–°–¥–µ–ª–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {call.from_user.username} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –≤–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {replenishment}$", reply_markup = start_keyboard)
    await call.message.edit_text(f"–°–¥–µ–ª–∫–∞ c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å, —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ: {replenishment}$", reply_markup = start_keyboard)
    
    newbalance = user_recipient + replenishment

    onenumber_transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (params[1],))
    twonumber_transactions = db.get("SELECT number_transactions FROM users WHERE user_id = ?", (call.from_user.id,))
    for onenumber_transactions in onenumber_transactions:
        pass
    for twonumber_transactions in twonumber_transactions:
        pass
    onenumber_transactions = onenumber_transactions + 1
    twonumber_transactions = twonumber_transactions + 1
    
    db.change("UPDATE users SET transaction_status = ?, summ_input = ?, number_transactions = ? WHERE user_id = ?", (0, 0, twonumber_transactions, call.from_user.id,))
    db.change("UPDATE users SET balance = ?, number_transactions = ? WHERE user_id = ?", (newbalance, onenumber_transactions, params[1],))
    
@dp.callback_query_handler(filters.Regexp("cencel*"))
async def callback_query(call: types.CallbackQuery):
    
     # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = call.data.split("_")
    
    db.change("UPDATE users SET summ_input = ? WHERE user_id = ?", (0, params[1],))
    db.change("UPDATE users SET transaction_status = ? WHERE user_id = ?", (0, params[1],))
    username = db.get("SELECT login FROM users WHERE user_id = ?", (params[1],))
    for username in username:
        pass
    
    await call.message.edit_text(f"üü•–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username}", reply_markup = start_keyboard)
    await bot.send_message(params[1], f"\n\nüü• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É",
                                reply_markup=start_keyboard
    )

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
@dp.callback_query_handler(text=["replenishment"], state=Payment.end)
async def adding_funds_account(call: types.CallbackQuery, state: FSMContext):
    number = db.get("SELECT * FROM order_id", (), False)
    update = number[0][1]
    update_number = update+1
    data = await state.get_data()
    data_payment = {
    'amount': data['currency'],
    'currency': data['network'],
    'network': data['amount'],
    'order_id': f"{update}",
    'url_return': 'https://example.com/return',
    'url_callback': 'https://example.com/callback',
    'is_payment_multiple': False,
    'lifetime': '7200',
    'to_currency': 'USDT'
    };
    result = payment.create(data_payment)
    result_url = result["url"]
    db.change("UPDATE order_id SET number = ?", (update_number,))
    await call.message.edit_text(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç",
        reply_markup = InlineKeyboardMarkup(row_width=1).add(
                       InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è", url=f"{result_url}"),
                       InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"{update}_ch_{data['currency']}")
                    )
    )
    await state.finish()


@dp.callback_query_handler(filters.Regexp("ch"))
async def callback_query(call: types.CallbackQuery):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    params = call.data.split("_")
    data = {
        "uuid": "a7c0caec-a594-4aaa-b1c4-77d511857594",
        "order_id": f"{params[0]}"
    }

    result_p = payment.info(data)
    if result_p["payment_status"] == 'paid':
        await call.message.edit_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {params[2]}$",
        reply_markup = my_purchases_keyboard
        )
        total_received_balance = db.get("SELECT balance, total_received, referrer_id FROM users WHERE user_id = ?", (call.from_user.id,))
        if total_received_balance[2] != None:
            referrer = db.get("SELECT balance FROM users WHERE user_id = ?", (total_received_balance[2],))
            balance_referrer = float(params[2]) * 0.05
            new_referrer = float(referrer[0]) + balance_referrer
            db.change("UPDATE users SET balance = ? WHERE user_id = ?", (new_referrer, total_received_balance[2]))
        else:
            total_received = total_received_balance[1] + float(params[2])
            balance = total_received_balance[0] + float(params[2])
            db.change("UPDATE users SET balance = ?, total_received = ? WHERE user_id = ?", (balance, total_received, call.from_user.id))
    elif result_p["payment_status"] == 'check':
        await bot.send_message(call.from_user.id, "‚ôªÔ∏è–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    else:
        await bot.send_message(call.from_user.id, "‚ôªÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
@dp.callback_query_handler(text=["confirmationwithdrawal"], state=Payment–°onclusion.end)
async def output_balance(call: types.CallbackQuery, state: FSMContext):
    data = {
    'amount': '200',
    'currency': 'USDT',
    'network': 'TRON',
    'order_id': '1243',
    'address': 'TUpSuKeBnZAvgAF7Y4KUFPRNftaQzPtwUo',
    'is_subtract': '1',
    'url_callback': 'https://example.com/callback'
    }
    try:
        result = payout.create(data)
    except:
        await call.message.edit_text("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=suppurt)

    await state.finish()

#   –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î

@dp.callback_query_handler(state=StateMessage.end, text=["backMenu_after_deal"]) 
async def process_backMenu_command(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode="html",
        reply_markup = start_keyboard
    )
    await state.finish() 

@dp.callback_query_handler(text="backMenu")
async def process_backMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>–Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode="html",
        reply_markup = start_keyboard
    )

@dp.callback_query_handler(text="backReferalMenu")
async def process_backReferalMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{cfg.BOT_NICKNAME}?start={call.from_user.id}",
        parse_mode="html",
        reply_markup = referal_system_keyboard
    )
 
@dp.callback_query_handler(text="backGuaranteeMenu")
async def process_backGuaranteeMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üì¨ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É: ',
        parse_mode="html",
        reply_markup = guarantee_deal_keyboard
    )
    
@dp.callback_query_handler(text="backMarketMenu")
async def process_backMarketMenu_command(call: types.CallbackQuery):
    await call.message.edit_text(
        'üì∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É',
        parse_mode="html",
        reply_markup = market_keyboard
    )   