from loader import db, dp, bot
from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.keyboard import *
from states.States import *
import time

# @dp.message_handler(commands=["start"], state="*", chat_type=["private"])
# async def start(message: types.Message, state: FSMContext):

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if db.get("SELECT id FROM users WHERE user_id = ?", (message.from_user.id,)) == None:
        start_command = message.text
#       –ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ —Ä–µ—Ñ–µ—Ä–∞
        referrer_id = str(start_command[7:])
#       –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ —Ä–µ—Ñ–µ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
        if str(referrer_id) != "":
#           –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å–≤–æ–π —Å—Å—ã–ª–∫–µ
            if str(referrer_id) != str(message.from_user.id):
                db.change(f"INSERT INTO users VALUES(NULL, ?, ?, ?, ?, 0, 0, 0, 0)", (message.chat.username, int(time.time()), message.from_user.id, referrer_id,))
                try:
#                    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –ø–æ –µ–≥–æ —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–ª–∏
                    await bot.send_message(referrer_id, "üíé–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É –≤–∞—Å –ø–ª—é—Å 1 —Ä–µ—Ñ–µ—Ä–∞–ªüíé")
                except:
                    pass
            else:
#               –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–ø–∞–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —é–∑–µ—Ä–∞
                db.change(f"INSERT INTO users VALUES(NULL, ?, ?, ?, NULL, 0, 0, 0, 0)", (message.chat.username, int(time.time()), message.from_user.id,))
                await bot.send_message(message.from_user.id,
                                       "‚ùå‚ö†Ô∏è–û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞:\n–ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ‚ö†Ô∏è‚ùå"
                                       )
        else:
#           –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª –ø–æ —Å—Å—ã–ª–∫–µ
            db.change(f"INSERT INTO users VALUES(NULL, ?, ?, ?, NULL, 0, 0, 0, 0)", (message.chat.username, int(time.time()), message.from_user.id,))
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º <b>–º–∞—Ä–∫–µ—Ç–µ!</b> –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º!ü§ë",
        parse_mode="html",
        reply_markup = start_keyboard
    )

# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª–∏
@dp.message_handler(state=StateMessage.translation)
async def add_translation(message: types.Message, state: FSMContext):   

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç —É —é—Ö–µ—Ä–∞ –¥–µ–Ω–µ–≥ –∏–ª–∏ –Ω–µ—Ç
    subtraction_balance = db.get("SELECT balance FROM users WHERE user_id = ?", (message.from_user.id,))
    for subtraction_balance in subtraction_balance:
        pass
    if  message.text.replace(".", "", 1).isdigit() == False:
        await message.answer("üü• –ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –Ω–∏—á–µ–≥–æ –∫—Ä–æ—á–µ —á–∏—Å–ª–∞ üü•")
    else:
        if subtraction_balance < float(message.text):
            await message.answer(f"ü•≤–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Å—É–º–º—ã\n–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {subtraction_balance}$")
        else:
            await state.update_data(translation=message.text)
            await message.answer("‚óªÔ∏è–í–≤–µ–¥–∏—Ç–µ NickName –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n‚óº–í–∞–∂–Ω–æ: –≤–≤–æ–¥–∏—Ç—å nickname –±–µ–∑ '@'\nüî∏–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: lolzcoder_star")
            await StateMessage.nickname.set()
    
# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫–∞–∑–∞–ª–∏    
@dp.message_handler(state=StateMessage.nickname)
async def add_username(message: types.Message, state: FSMContext):
    
    user = db.get("SELECT login FROM users WHERE login = ?", (message.text,))
    if not user:
        await message.answer(f"üö∑–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º: @{message.text} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ωüö∑\n–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –ª–æ–≥–∏–Ω\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    else:
        await state.update_data(nickname=message.text)
        await message.answer(f"‚óΩÔ∏è–î–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è NickName: @{message.text}\nüî∏–í–≤–µ–¥–∏—Ç–µ NickName –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        await StateMessage.userid.set()
    
# –ø–æ–ª—É—á–∞–µ–º –ø–æ –Ω–∏–∫—É id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   
@dp.message_handler(state=StateMessage.userid)
async def add_user_id(message: types.Message, state: FSMContext):
    
    data = await state.get_data()
    user_id = db.get("SELECT user_id FROM users WHERE login = ?", (data['nickname'],))
    if message.text != data['nickname']:
            await message.answer("üî∏–í–≤–µ–¥–∏—Ç–µ NickName –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æüî∏")
    else:
        await state.update_data(userid=user_id)
        await message.answer("‚ö™Ô∏è–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏‚ö´\nüî∏–û–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–∏ –∫–∞–∫–æ–º —É—Å–ª–æ–≤–∏–∏ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–¥–µ–ª–∫–∞")
        await StateMessage.description.set()

@dp.message_handler(state=StateMessage.description)
async def add_description(message: types.Message, state: FSMContext):
    
    data = await state.get_data()
    await state.update_data(description=message.text)
    await message.answer(
        f"üì£–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @{data['nickname']}?",
        reply_markup = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="end–ïransaction"),
            InlineKeyboardButton("üî¥–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="backMenu_after_deal")
            )
        )
    await StateMessage.end.set()
 
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—ã–Ω–æ–∫
@dp.message_handler(state=GoodsMarket.namegoods)
async def add_name_goods(message: types.Message, state: FSMContext):
    
    await state.update_data(namegoods=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")
    await GoodsMarket.description.set()
    
@dp.message_handler(state=GoodsMarket.description)
async def add_description(message: types.Message, state: FSMContext):
    
    await state.update_data(description=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ: ")
    await GoodsMarket.abou–µseller.set()
    
@dp.message_handler(state=GoodsMarket.abou–µseller)
async def add_description(message: types.Message, state: FSMContext):
    
    await state.update_data(abou–µseller=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä: ")
    await GoodsMarket.price.set()
    
@dp.message_handler(state=GoodsMarket.price)
async def add_description(message: types.Message, state: FSMContext):
    
    data = await state.get_data()
    await state.update_data(price=message.text)
    await message.answer(
        f"–í—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Ä—ã–Ω–æ–∫?",
        reply_markup = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üü¢–í—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="display_product"),
            InlineKeyboardButton("üî¥–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_product")
            )
        
        )
    await GoodsMarket.end.set()

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(state=Payment.currency)
async def add_currency(message: types.Message, state: FSMContext):

    await state.update_data(currency=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã\n–ü—Ä–∏–º–µ—Ä: USDT, TRC")
    await Payment.network.set()

@dp.message_handler(state=Payment.network)
async def add_network(message: types.Message, state: FSMContext):

    await state.update_data(network=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç–µ–≤–æ–π –∫–æ–¥ –±–ª–æ–∫—á–µ–π–Ω–∞\n–ü—Ä–∏–º–µ—Ä: Tron")
    await Payment.amount.set()

@dp.message_handler(state=Payment.amount)
async def add_amount(message: types.Message, state: FSMContext):

    await state.update_data(amount=message.text)
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup = InlineKeyboardMarkup(row_width=True).add(
            InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", callback_data="replenishment")
            )
        )
    await state.finish()