from loader import db, dp, bot
from aiogram import types
from aiogram.dispatcher import filters
from aiogram.dispatcher import FSMContext
from keyboards.keyboard import *
from filters.filters import *
from states.States import *
import re

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é-------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="backAdmin_panel")
async def menu(call: types.CallbackQuery):
	await call.message.edit_text(
        f"üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b><u>{call.from_user.username}</u></b>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏\n‚öôÔ∏è –ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?",
        parse_mode="html",
        reply_markup=admin_start)
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω–µ—Ü-------------------------------------------------------------------------------------

# –ñ–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π--------------------------------------------------------------------------------
@dp.callback_query_handler(text="complaints_button")
async def complaint(call: types.CallbackQuery):
	complaints = db.get("SELECT * FROM dispute", (), False)
	await call.message.edit_text(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±: {len(complaints)}", reply_markup=reviewComplaints(complaints))

@dp.callback_query_handler(filters.Regexp("review*"))
async def add_merket(call: types.CallbackQuery):
	review = call.data.split("_")[1]
	dispute = db.get("SELECT * FROM dispute WHERE id = ?", (review,))
	users = db.get("SELECT * FROM users WHERE user_id = ?", (dispute[1],))
	cheater = db.get("SELECT * FROM users WHERE user_id = ?", (dispute[3],))
	await call.message.edit_text(f"üìã–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–û—Ç: <b>{users[1]}</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ù–∞: <b>{cheater[1]}</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–°—É–º–º–∞: {dispute[2]}$",
		reply_markup=InlineKeyboardMarkup(row_width=2).add(
			InlineKeyboardButton(text="üî¥–ó–∞–±–∞–Ω–∏—Ç—å", callback_data="ban_chiter"),
    		InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="complaints_button"),
    		InlineKeyboardButton(text="üü¢–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"complite_sdel_{dispute[0]}")
			)
		)
# –ñ–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω–µ—Ü--------------------------------------------------------------------------

# –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É-----------------------------------------------------------------------------------------
@dp.callback_query_handler(filters.Regexp("complite_sdel*"))
async def complute(call: types.CallbackQuery):
	complite = call.data.split("_")[2]
	dispute = db.get("SELECT * FROM dispute WHERE id = ?", (complite,))
	users = db.get("SELECT * FROM users WHERE user_id = ?", (dispute[1],))
	cheater = db.get("SELECT * FROM users WHERE user_id = ?", (dispute[3],))

	newbalance = cheater[5] + dispute[2]
	db.change("UPDATE users SET balance = ? WHERE user_id = ?", (newbalance, dispute[3],))

	await bot.send_message(users[3], f"–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {cheater[1]}")
	await bot.send_message(cheater[3], f"–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {users[1]}")

	db.change("DELETE FROM dispute WHERE id = ?", (complite,))

	await call.message.edit_text("–ñ–∞–ª–æ–±–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞", reply_markup=admin_complaints_back)

# –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –∫–æ–Ω–µ—Ü-----------------------------------------------------------------------------------

# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π--------------------------------------------------------------------------------------
@dp.callback_query_handler(text="ban_users")
async def button_ban(call: types.CallbackQuery):
	await call.message.edit_text(f"<b>{call.from_user.username}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ",
	reply_markup=ban_users_button)
# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω–µ—Ü--------------------------------------------------------------------------------

# –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—ã–Ω–æ–∫------------------------------------------------------------------------------
@dp.callback_query_handler(text="market_buton_add")
async def add_market(call: types.CallbackQuery):
	data = db.get("SELECT * FROM games WHERE status = ?", (1,), False)
	await call.message.edit_text(
		"–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
		reply_markup=accountsReview(data)
		)

@dp.callback_query_handler(filters.Regexp("baget*"))
async def add_merket(call: types.CallbackQuery):
	try:
		idprod = call.data.split("_")[1]
		userinfo = db.get("SELECT * FROM games WHERE id = ?", (idprod,))
		confedicialpassword = userinfo[5][:-5] + '******'
		confediciallogin = userinfo[4][:-4] + '*****'
		await bot.send_photo(
			call.from_user.id, userinfo[1],
			 f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{userinfo[2]}</b>\n---------------------------------------\nüí∞ –¶–µ–Ω–∞: <b>{userinfo[3]}</b>$\n---------------------------------------\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>@{userinfo[7]}</b>\n---------------------------------------\nüìù –ü–∞—Ä–æ–ª—å: {confedicialpassword}\n---------------------------------------\nü™™ –õ–æ–≥–∏–Ω: {confediciallogin}",
			 parse_mode="html",
			 reply_markup=InlineKeyboardMarkup(row_width=2).add(
			 	InlineKeyboardButton(text="üü¢–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approval_{idprod}"),
			 	InlineKeyboardButton(text="üî¥–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{idprod}")
			 	)
			)
	except:
		await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.callback_query_handler(filters.Regexp("approval*"))
async def add_merket(call: types.CallbackQuery):
	idprod = call.data.split("_")[1]
	messuser = db.get("SELECT * FROM games WHERE id = ?", (idprod,))
	await bot.send_message(messuser[6], f"üü¢–í–∞—à —Ç–æ–≤–∞—Ä: {messuser[2]}\nüü¢–û–¥–æ–±—Ä–µ–Ω")
	await call.message.delete()
	await call.message.answer("–¢–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω")
	db.change("UPDATE games SET status = ? WHERE id = ?", (0, idprod))

@dp.callback_query_handler(filters.Regexp("reject*"))
async def delete_market(call: types.CallbackQuery):
	idprod = call.data.split("_")[1]
	messuser = db.get("SELECT * FROM games WHERE id = ?", (idprod,))
	await bot.send_message(messuser[6], f"üî¥–í–∞—à —Ç–æ–≤–∞—Ä: {messuser[2]}\nüî¥–ù–µ –æ–¥–æ–±—Ä–µ–Ω")
	await call.message.delete()
	await call.message.answer("–ù–µ –æ–¥–æ—Ä–µ–Ω–æ")
	db.change("DELETE FROM games WHERE id = ?", (idprod,))
# –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—ã–Ω–æ–∫ –∫–æ–Ω–µ—Ü------------------------------------------------------------------------

# –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ ----------------------------------------------------------------------
@dp.callback_query_handler(text="admin_balance_users")
async def add_balance(call: types.CallbackQuery):
	await call.message.edit_text("–í—ã —Ç–æ—á–Ω–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?", reply_markup=yes_no_button)

@dp.callback_query_handler(text="amdin_add_balance", state=None)
async def add_balance(call: types.CallbackQuery, state: FSMContext):
	await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	await AddBalanceUsers.login.set()

@dp.callback_query_handler(text="add_balance_yes", state=AddBalanceUsers.end)
async def add_balance_user(call: types.CallbackQuery, state: FSMContext):

	data = await state.get_data()
	users = db.get("SELECT * FROM users WHERE login = ?", (data['login'],))
	new_balance = users[5] + float(data['depositAmount'])

	db.change("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, users[3]))
	await call.message.edit_text(
		f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å {data['login']}\n–ù–∞ —Å—É–º–º—É: {data['depositAmount']}$",
		reply_markup=admin_start
		)
	await bot.send_message(users[3], f"üí† –í–∞–º –ø—Ä–∏—à–µ–ª –ø–æ–¥–≥–æ–Ω –æ—Ç –∞–¥–º–∏–Ω–∞\nüíé –ù–∞ —Å—É–º–º—É: {data['depositAmount']}$")
	await state.finish()
# –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –∫–æ–Ω–µ—Ü----------------------------------------------------------------